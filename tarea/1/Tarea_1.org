#+TITLE: Tarea 1
#+author: Cristian Romero Andrade
#+options: toc:nil
#+language: es
#+latex_header_extra: \input{../../conf.tex}

El articulo ve a detalle algunas arquitecturas empleadas para
la Bases de Datos transaccionales distribuidas, donde estas han
resuelto varios problemas de distribución de grandes cantidades de
información. Menciona tres arquitecturas tradicionales y un concepto
de distribución relativamente nuevo.
1. [[sec:1][Shared-Disk (Bases de datos de disco compartido)]]
2. [[sec:2][Shared-Nothing/Sharded (Nada compartido/fragmentado)]]
3. [[sec:3][Synchronous Replication (Replicación sincrónica)]]
4. [[sec:3][Durable Distributed Cache (Caché distribuida duradera)]]

* Shared Disk<<sec:1>>
Esta distribución consta de tener varios servidores con un mismo
clúster, donde cada servidor están cargando y almacenado páginas
de datos en el mismo subsistema de disco compartido,
esta arquitectura es excelente para sistemas con alta carga de trabajo.
Sin embargo, este beneficio puede llegar a ser un mismo impedimento ya que
la misma carga puede provocar un cuello de botella si la base de datos esta
limitada por las entradas y salidas del sistema.
* Shared-Nothing/Sharded<<sec:2>>
Esta distribución consiste en varios nodos con el mismo propósito, pero
sin compartir datos y procesos independientes, estos nodos están conectados
entre sí en cada uno de ellos tienen una copia del sistema del gestor de base
de datos. Esta arquitectura es útil y escalable, ya que se puede expandir de forma
casi indefinida. Al igual que la arquitectura anterior, sus bondades también pueden
llegar a ser un impedimento en su rendimiento, en este caso un buen diseño de
la BD es critico para la organización de las consultas y que esa este bien optimizada.
* Synchronous Replication<<sec:3>>
Esta forma de construir bases de datos, se podría considerar la más natural de diseñar
bases de datos distribuidas, en la cual consiste en confirmar una transacción en varias
ubicaciones antes de regresar un estado de éxito, si la confirmación falla, los cambios
no confirmados no cambian y se descartan. La gran desventaja de la replicación sincrónica
es el tiempo, ya que el nodo maestro tiene que esperar a los demás nodos la respuesta
de éxito para guardar los datos, esto puede llevar a una mala experiencia de usuario
por el tiempo de espera que este siente.

El articulo menciona de Google F1, la implementación de dicha distribución, sin embargo,
en el momento que se escribió el articulo F1 solo servia para Google y su Google Ads.
* TODO Durable Distributed Cache<<sec:4>>
